import { Request, Response } from 'express';

interface AuthenticatedRequest extends Request {
  user?: {
    id: string;
    role: string;
    tenantId?: string;
  };
}

// Zed Business API Configuration
const ZED_BUSINESS_CONFIG = {
  apiKey: 'X-Authorization',
  baseUrl: 'https://api.dev.zed.business',
  externalOrigin: '9002742',
  authToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJub2IiOnsidmFsdWUiOjUwLCJzdGF0ZSI6ZmFsc2V9LCJ2b2NiIjpmYWxzZSwidXNlcklkIjoiNjQ5ZDJlMTc2MmFlMjJkZjg2ZjAxNjk3IiwiaWQiOiI2NDlkMmUxNzYyYWUyMmRmODZmMDE2OTciLCJlbWFpbCI6ImtpbWF0aGljaHJpczEzK2RhaWx5aG90ZWxAZ21haWwuY29tIiwidXNlck5hbWUiOiJCcmlhbkdpdGh1YSIsImdyb3VwIjoiTWVyY2hhbnQiLCJiaWQiOiI5MDAyNzQyIiwiYmlkU3RyaW5nIjoiNjhiMTQ4MjM4MDRlNWRmNzA5ZGU2MWM3IiwiY3VzdG9tZXJJZCI6IjY2MjY1ZmYzZDg5Njc1YTk3NTY1ZGRkYSIsImJ1c2luZXNzTmFtZSI6IkRhaWx5IEhvdGVsIiwiYnVzaW5lc3NPd25lclBob25lIjoiKzI1NDU0NTQ1NDU0NCIsImJ1c2luZXNzT3duZXJBZGRyZXNzIjoiTmFpcm9iaSwgS2VueWEiLCJidWxrVGVybWluYWxzIjpbXSwic2Vzc2lvbkV4cGlyeSI6IjIwMjUtMDgtMzBUMDY6MjY6NDUuMjM5WiIsIlRpbGwiOiIiLCJQYXliaWxsIjoiIiwiVm9vbWEiOiIiLCJFcXVpdGVsIjoiIiwic3RvcmVOYW1lIjoibnVsbCIsImxvY2FsQ3VycmVuY3kiOiJLRVMiLCJ4ZXJvQWNjb3VudGluZ0VuYWJsZWQiOiJmYWxzZSIsInF1aWNrYm9va3NBY2NvdW50aW5nRW5hYmxlZCI6ImZhbHNlIiwiem9ob0FjY291bnRpbmdFbmFibGVkIjoiZmFsc2UiLCJpYXQiOjE3NTY0NDg4MDUsImV4cCI6MTc1NjUzNTIwNX0.4LrMoetiZiTSc7HzeCGuAaxnEk1tP7e3F05ccxxxtwc'
};

// Type definitions for Zed Business API responses
interface ZedBusinessApiResponse {
  success?: boolean;
  status?: string;
  message?: string;
  errorMessage?: string;
  ResponseCode?: string;
  CheckoutRequestID?: string;
  transactionId?: string;
  [key: string]: any;
}

export class MPesaKCBController {
  /**
   * Initiate MPESA KCB STK Push payment via Zed Business API
   */
  async initiatePayment(req: AuthenticatedRequest, res: Response): Promise<void> {
    try {
      const { 
        amount, 
        phoneNumber, 
        phone, 
        currency = 'KES', 
        orderId, 
        customerName, 
        description, 
        type = 'deposit' 
      } = req.body;
      
      const tenantId = req.user?.tenantId;

      if (!tenantId) {
        res.status(400).json({ 
          success: false, 
          error: 'Tenant ID is required' 
        });
        return;
      }

      // Use phoneNumber if provided (from frontend), otherwise fall back to phone
      const inputPhone = phoneNumber || phone;
      
      if (!inputPhone) {
        res.status(400).json({ 
          success: false, 
          error: 'Phone number is required' 
        });
        return;
      }

      // Validate phone number format for East African countries
      if (!this.validateEastAfricanPhoneNumber(inputPhone)) {
        res.status(400).json({ 
          success: false, 
          error: 'Invalid East African phone number format. Please use format: +254XXXXXXXXX, +256XXXXXXXXX, +255XXXXXXXXX, +250XXXXXXXXX, +257XXXXXXXXX, +243XXXXXXXXX, or +211XXXXXXXXX' 
        });
        return;
      }

      // Validate currency
      const supportedCurrencies = ['KES', 'UGX', 'TZS', 'RWF', 'BIF', 'CDF', 'SSP'];
      if (!supportedCurrencies.includes(currency)) {
        res.status(400).json({ 
          success: false, 
          error: 'Unsupported currency. Supported currencies: ' + supportedCurrencies.join(', ') 
        });
        return;
      }

      // Format phone number for Zed Business API
      const formattedPhone = this.formatPhoneNumberForZedBusiness(inputPhone);

      // Generate unique transaction reference using ZedUno format
      const invoiceNumber = Math.floor(Math.random() * 100000); // Generate 5-digit random number
      const transactionRef = `ZDU_${invoiceNumber}`;

      // Prepare payload for Zed Business M-Pesa KCB API
      const zedPayload = {
        amount: parseFloat(amount.toString()),
        phoneNumber: formattedPhone,
        currency: currency,
        reference: transactionRef,
        description: description || `Payment for Order #${orderId}`,
        externalOrigin: ZED_BUSINESS_CONFIG.externalOrigin,
        customerName: customerName,
        orderId: orderId
      };

      console.log('üöÄ Initiating M-Pesa KCB payment via Zed Business:', {
        phone: formattedPhone,
        amount,
        currency,
        reference: transactionRef
      });

      // Use MPesaService which will try multiple endpoints
      const { MPesaService } = await import('../services/mpesa.service');
      const mpesaService = MPesaService.getInstance();
      
      // Convert to MPesa service format
      const mpesaRequest = {
        phoneNumber: formattedPhone,
        amount: parseFloat(amount.toString()),
        accountReference: transactionRef,
        transactionDesc: description || `Payment for Order #${orderId}`,
        callbackUrl: 'http://192.168.2.43:5000/api/mpesa-kcb/callback'
      };
      
      console.log('üöÄ Initiating M-Pesa payment via service:', {
        phone: formattedPhone,
        amount: parseFloat(amount.toString()),
        reference: transactionRef
      });

      // Use the service which will try multiple endpoints
      const zedResult = await mpesaService.initiateSTKPush(
        {} as any, // credentials not used for Zed Business
        mpesaRequest
      );
      
      console.log('‚úÖ Zed Business API response:', zedResult);

      // Check if the STK push was successful
      if (zedResult.ResponseCode === '0') {
        // Real STK push initiated successfully
        res.json({
          success: true,
          message: 'M-Pesa STK push sent to your phone successfully. Please complete the payment.',
          data: {
            transactionId: zedResult.CheckoutRequestID || zedResult.MerchantRequestID || transactionRef,
            checkoutRequestId: zedResult.CheckoutRequestID,
            orderId: orderId,
            amount: amount,
            currency: currency,
            phone: formattedPhone,
            customerName: customerName,
            description: description,
            status: 'pending'
          },
          reference: transactionRef,
          paymentStatus: 'initiated',
          requiresUserAction: true,
          zedBusinessResponse: zedResult
        });
      } else {
        // STK push failed
        throw new Error(zedResult.ResponseDescription || 'Failed to initiate M-Pesa payment');
      }

    } catch (error) {
      console.error('Error initiating MPESA KCB payment:', error);
      
      res.status(500).json({ 
        success: false,
        error: error instanceof Error ? error.message : 'Payment initiation failed',
        details: 'Failed to connect to Zed Business M-Pesa API'
      });
    }
  }

  /**
   * Handle MPESA KCB callback from Zed Business
   */
  async handleCallback(req: Request, res: Response): Promise<void> {
    try {
      console.log('üîÑ M-Pesa KCB callback received from Zed Business:', JSON.stringify(req.body, null, 2));

      const callbackData = req.body;
      
      // Process the callback based on Zed Business format
      // This is where you would update the order status to 'paid' after confirming payment
      
      if (callbackData.resultCode === 0 || callbackData.ResultCode === '0' || callbackData.status === 'success') {
        // Payment successful - update order status
        console.log('‚úÖ Payment successful:', callbackData);
        
        // TODO: Update order status in your database to 'paid'
        // const orderId = callbackData.orderId || callbackData.reference;
        // await updateOrderStatus(orderId, 'paid');
      } else {
        // Payment failed or cancelled
        console.log('‚ùå Payment failed:', callbackData);
        
        // TODO: Update order status to 'failed'
      }
      
      res.status(200).json({ 
        success: true,
        message: 'Callback processed successfully',
        ResultCode: '0',
        ResultDesc: 'Accepted'
      });
    } catch (error) {
      console.error('Error handling MPESA KCB callback:', error);
      res.status(500).json({ 
        success: false,
        error: 'Internal server error' 
      });
    }
  }

  /**
   * Query payment status via Zed Business API
   */
  async queryPaymentStatus(req: AuthenticatedRequest, res: Response): Promise<void> {
    try {
      const { transactionId } = req.params;

      try {
        // Query Zed Business API for payment status
        const statusResponse = await fetch(`${ZED_BUSINESS_CONFIG.baseUrl}/api/mpesa/query/${transactionId}`, {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${ZED_BUSINESS_CONFIG.authToken}`,
            [ZED_BUSINESS_CONFIG.apiKey]: ZED_BUSINESS_CONFIG.authToken,
            'Accept': 'application/json'
          }
        });

        if (statusResponse.ok) {
          const statusResult = await statusResponse.json() as ZedBusinessApiResponse;
          
          res.json({
            success: true,
            data: {
              transactionId,
              status: statusResult.status || 'pending',
              message: statusResult.message || 'Transaction is being processed'
            },
          });
          return;
        }
      } catch (queryError) {
        console.log('Status query failed, returning default pending status');
      }

      // Fallback for status query
      res.json({
        success: true,
        data: {
          transactionId,
          status: 'pending',
          message: 'Transaction is being processed'
        },
      });

    } catch (error) {
      console.error('Error querying payment status:', error);
      res.status(500).json({ 
        success: false,
        error: 'Failed to query payment status' 
      });
    }
  }

  /**
   * Get payment history
   */
  async getPaymentHistory(req: AuthenticatedRequest, res: Response): Promise<void> {
    try {
      const tenantId = req.user?.tenantId;

      // TODO: Implement payment history from your database
      res.json({
        success: true,
        data: {
          transactions: [],
          totalCount: 0,
          totalPages: 0,
          currentPage: 1,
        },
      });
    } catch (error) {
      console.error('Error getting payment history:', error);
      res.status(500).json({ 
        success: false,
        error: 'Failed to get payment history' 
      });
    }
  }

  /**
   * Get payment statistics
   */
  async getPaymentStatistics(req: AuthenticatedRequest, res: Response): Promise<void> {
    try {
      // TODO: Implement payment statistics from your database
      res.json({
        success: true,
        data: {
          summary: {
            totalTransactions: 0,
            totalAmount: 0,
            successfulTransactions: 0,
            successfulAmount: 0,
            failedTransactions: 0,
            pendingTransactions: 0,
          },
          breakdown: [],
        },
      });
    } catch (error) {
      console.error('Error getting payment statistics:', error);
      res.status(500).json({ 
        success: false,
        error: 'Failed to get payment statistics' 
      });
    }
  }

  /**
   * Validate East African phone number format
   */
  private validateEastAfricanPhoneNumber(phoneNumber: string): boolean {
    const digits = phoneNumber.replace(/\D/g, '');
    
    // Check for valid East African country codes and proper length
    const validPatterns = [
      /^254[17]\d{8}$/,    // Kenya: 254 + 7/1 + 8 digits
      /^256[37]\d{8}$/,    // Uganda: 256 + 7/3 + 8 digits  
      /^255[67]\d{8}$/,    // Tanzania: 255 + 6/7 + 8 digits
      /^250[78]\d{8}$/,    // Rwanda: 250 + 7/8 + 8 digits
      /^257[68]\d{7}$/,    // Burundi: 257 + 6/8 + 7 digits
      /^243[89]\d{8}$/,    // Congo: 243 + 8/9 + 8 digits
      /^211[19]\d{8}$/     // South Sudan: 211 + 1/9 + 8 digits
    ];
    
    return validPatterns.some(pattern => pattern.test(digits));
  }

  /**
   * Format phone number for Zed Business API
   */
  private formatPhoneNumberForZedBusiness(phoneNumber: string): string {
    let cleaned = phoneNumber.replace(/[\s\-\(\)]/g, '');
    
    // Remove leading + if present
    if (cleaned.startsWith('+')) {
      cleaned = cleaned.substring(1);
    }
    
    // Convert local format (0) to international format
    if (cleaned.startsWith('0')) {
      cleaned = cleaned.substring(1);
      // Default to Kenya if no country code provided
      cleaned = `254${cleaned}`;
    }
    
    // Zed Business expects format: 254XXXXXXXXX (no + prefix)
    return cleaned;
  }
}

const mpesaKCBController = new MPesaKCBController();
export default mpesaKCBController;
