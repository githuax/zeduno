export interface Branch {
  _id: string;
  tenantId: string;
  parentBranchId?: string;
  name: string;
  code: string;
  type: 'main' | 'branch' | 'franchise';
  status: 'active' | 'inactive' | 'suspended';
  
  address: {
    street: string;
    city: string;
    state: string;
    postalCode: string;
    country: string;
    coordinates?: {
      latitude: number;
      longitude: number;
    };
  };
  
  contact: {
    phone: string;
    email: string;
    managerName?: string;
    managerPhone?: string;
    managerEmail?: string;
  };
  
  operations: {
    openTime: string;
    closeTime: string;
    timezone: string;
    daysOpen: string[];
    holidaySchedule?: any[];
    seatingCapacity?: number;
    deliveryRadius?: number;
  };
  
  financial: {
    currency: string;
    taxRate: number;
    alcoholTaxRate?: number;
    serviceChargeRate?: number;
    tipEnabled: boolean;
    paymentMethods: string[];
    bankAccount?: {
      accountName: string;
      accountNumber: string;
      bankName: string;
      routingNumber?: string;
    };
  };
  
  inventory: {
    trackInventory: boolean;
    lowStockAlertEnabled: boolean;
    autoReorderEnabled: boolean;
    warehouseId?: string;
  };
  
  menuConfig: {
    inheritFromParent: boolean;
    priceMultiplier?: number;
    customPricing: boolean;
    availableCategories?: string[];
  };
  
  staffing: {
    maxStaff: number;
    currentStaff: number;
    roles: string[];
    shiftPattern?: string;
  };
  
  metrics: {
    avgOrderValue: number;
    totalOrders: number;
    totalRevenue: number;
    rating?: number;
    lastUpdated: string;
  };
  
  integrations: {
    posSystemId?: string;
    posSystemType?: string;
    kitchenDisplayId?: string;
    onlineOrderingEnabled: boolean;
  };
  
  settings: {
    orderPrefix: string;
    orderNumberSequence: number;
    receiptHeader?: string;
    receiptFooter?: string;
    logoUrl?: string;
    theme?: string;
  };
  
  isActive: boolean;
  createdBy: string;
  createdAt: string;
  updatedAt: string;
}

export interface BranchHierarchy extends Branch {
  children: BranchHierarchy[];
}

export interface BranchMetrics {
  summary: {
    totalOrders: number;
    totalRevenue: number;
    avgOrderValue: number;
    totalItems: number;
  };
  daily: Array<{
    _id: string;
    orders: number;
    revenue: number;
  }>;
}

export interface ConsolidatedMetrics {
  totals: {
    totalOrders: number;
    totalRevenue: number;
    totalBranches: number;
    avgRevenuePerBranch: number;
    avgOrdersPerBranch: number;
  };
  branches: Array<{
    branchId: string;
    branchName: string;
    branchCode: string;
    orders: number;
    revenue: number;
    avgOrderValue: number;
  }>;
}

export interface CreateBranchData {
  name: string;
  code?: string; // Optional - auto-generated by backend if not provided
  type: 'main' | 'branch' | 'franchise';
  parentBranchId?: string;
  address: {
    street: string;
    city: string;
    state: string;
    postalCode: string;
    country: string;
    coordinates?: {
      latitude: number;
      longitude: number;
    };
  };
  contact: {
    phone: string;
    email: string;
    managerName?: string;
    managerPhone?: string;
    managerEmail?: string;
  };
  operations: {
    openTime: string;
    closeTime: string;
    timezone: string;
    daysOpen: string[];
    seatingCapacity?: number;
    deliveryRadius?: number;
  };
  financial: {
    currency: string;
    taxRate: number;
    alcoholTaxRate?: number;
    serviceChargeRate?: number;
    tipEnabled: boolean;
    paymentMethods: string[];
  };
  inventory: {
    trackInventory: boolean;
    lowStockAlertEnabled: boolean;
    autoReorderEnabled: boolean;
  };
  staffing: {
    maxStaff: number;
    roles: string[];
  };
  integrations: {
    onlineOrderingEnabled: boolean;
  };
  settings: {
    orderPrefix: string;
    theme?: string;
  };
}

export interface UpdateBranchData extends Partial<CreateBranchData> {
  status?: 'active' | 'inactive' | 'suspended';
}

export interface BranchFilters {
  status?: 'active' | 'inactive' | 'suspended';
  type?: 'main' | 'branch' | 'franchise';
  search?: string;
  includeInactive?: boolean;
}

export interface BranchContextType {
  branches: Branch[];
  currentBranch?: Branch;
  loading: boolean;
  error?: string;
  
  // Actions
  fetchBranches: (filters?: BranchFilters) => Promise<void>;
  fetchBranchHierarchy: () => Promise<BranchHierarchy[]>;
  createBranch: (data: CreateBranchData) => Promise<Branch>;
  updateBranch: (id: string, data: UpdateBranchData) => Promise<Branch>;
  deleteBranch: (id: string) => Promise<void>;
  cloneBranch: (sourceBranchId: string, data: CreateBranchData) => Promise<Branch>;
  
  // User-Branch operations
  switchBranch: (branchId: string) => Promise<void>;
  assignUserToBranch: (userId: string, branchId: string) => Promise<void>;
  removeUserFromBranch: (userId: string, branchId: string) => Promise<void>;
  
  // Metrics
  fetchBranchMetrics: (branchId: string, startDate?: Date, endDate?: Date) => Promise<BranchMetrics>;
  fetchConsolidatedMetrics: (startDate?: Date, endDate?: Date) => Promise<ConsolidatedMetrics>;
}

// User branch assignments
export interface UserBranch {
  assignedBranches: string[];
  currentBranch?: string;
  defaultBranch?: string;
  canSwitchBranches: boolean;
  branchRole: 'branch_manager' | 'branch_staff' | 'multi_branch';
}

// API Response types
export interface BranchApiResponse {
  success: boolean;
  data?: Branch | Branch[];
  count?: number;
  error?: string;
}

export interface BranchMetricsApiResponse {
  success: boolean;
  data?: BranchMetrics | ConsolidatedMetrics;
  period?: {
    startDate: string;
    endDate: string;
  };
  error?: string;
}
